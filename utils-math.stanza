defpackage utils/math :
  import core
  import math

public defn sqr (x:Float) -> Float : x * x
public defn sqr (x:Double) -> Double : x * x

extern fmodf: (float, float) -> float
extern fmod: (double, double) -> double

public lostanza defn modulo (a:ref<Float>, b:ref<Float>) -> ref<Float> :
  return new Float{ call-c fmodf(a.value, b.value) }

public lostanza defn modulo (a:ref<Double>, b:ref<Double>) -> ref<Double> :
  return new Double{ call-c fmod(a.value, b.value) }

public defn sign (x:Float) -> Float :
  1.0f when x > 0.0f else -1.0f when x < 0.0f else 0.0f

public defn sign (x:Double) -> Double :
  1.0 when x > 0.0 else -1.0 when x < 0.0 else 0.0

public defn f+ (a:Float, b:Float) : a + b ;; NEEDED FOR REDUCE BECAUSE OF BUG IN TYPE INFERENCE
public defn i+ (a:Int, b:Int) : a + b     ;; NEEDED FOR REDUCE BECAUSE OF BUG IN TYPE INFERENCE

